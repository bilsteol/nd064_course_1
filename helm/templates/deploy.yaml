## Set the API endpoint used to create the Deployment resource.
apiVersion: apps/v1
## Define the type of the resource.
kind: Deployment
## Set the parameters that make the object identifiable, such as its name, namespace, and labels.
metadata:
  annotations:
  labels:
    app: techtrends
  name: techtrends
  namespace: {{ .Values.namespace.name }}
## Define the desired configuration for the Deployment resource.
spec:
  ## Set the number of replicas.
  ## This will create a ReplicaSet that will manage 1 pods of the Python techtrends application.
  replicas: {{ .Values.replicaCount }}
  ## Identify the pods managed by this Deployment using the following selectors.
  ## In this case, all pods with the label `techtrends`.
  selector:
    matchLabels:
      app: techtrends
  ## Set the RollingOut strategy for the Deployment.
  ## For example, roll out only 25% of the new pods at a time.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  ## Set the configuration for the pods.
  template:
    ## Define the identifiable metadata for the pods.
    ## For example, all pods should have the label `techtrends`
    metadata:
      labels:
        app: techtrends
    ## Define the desired state of the pod configuration.
    spec:
      containers:
        ## Set the image to be executed inside the container and image pull policy
        ## In this case, run the `techtrends` application in version latest and
        ## only pull the image if it's not available on the current host.
      - image: {{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        name: techtrends
        ## Expose the port the container is listening on.
        ## For example, exposing the application port 3111 via TCP.
        ports:
        - containerPort: {{ .Values.containerPort }}
          protocol: {{ .Values.service.protocol }}
        ## Define the rules for the liveness probes.
        ## For example, verify the application on the app route `/healthz`,
        ## on application port 3111. If the application is not responsive, then the pod will be restarted automatically. 
        livenessProbe:
           httpGet:
             path: {{ .Values.livenessProbe.path }}
             port: {{ .Values.livenessProbe.port }}
        ## Define the rules for the readiness probes.
        ## For example, verify the application on the app route `/healthz`,
        ## on application port 3111. If the application is responsive, then traffic will be sent to this pod.
        readinessProbe:
           httpGet:
             path: {{ .Values.readinessProbe.path }}
             port: {{ .Values.readinessProbe.port }}
        ## Set the resource requests and limits for an application.
        resources:
{{ toYaml .Values.resources | indent 12 }}